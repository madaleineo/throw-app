generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Status {
  id   Int    @id @default(autoincrement())
  name String @db.VarChar(50)
  pot  Pot[]
}

model Session {
  id         Int      @id @default(autoincrement())
  token      String   @db.VarChar(100)
  created_at DateTime @db.Date
  user_id    Int
  user       User     @relation(fields: [user_id], references: [id])
}

model UserRole {
  id    Int    @id @default(autoincrement())
  name  String @db.VarChar(50)
  users User[]
}

model CustAq {
  id    Int    @id @default(autoincrement())
  type  String @db.VarChar(50)
  users User[]
}

model Product {
  id           Int            @id @default(autoincrement())
  name         String         @db.VarChar(150)
  price        Float
  description  String?        @db.VarChar(300)
  category     String         @db.VarChar(50)
  duration     String?        @db.VarChar(50)
  availability Availability[]
}

model Order {
  id                Int      @id @default(autoincrement())
  date_time         DateTime @db.Date
  user_id           Int?     @default(0)
  schedule_id       Int
  num_shared_wheels Int
  delivery          String   @db.VarChar(30)
  name              String   @default("") @db.VarChar(30)
  schedule          Schedule @relation(fields: [schedule_id], references: [id])
}

model Pot {
  id          Int      @id @default(autoincrement())
  name        String   @db.VarChar(100)
  description String?  @db.VarChar(150)
  glaze       Int      @default(1)
  status_id   Int      @default(1)
  created_at  DateTime @default(now())
  updated_at  DateTime @default(now()) @updatedAt
  group_id    Int      @default(0)
  status      Status   @relation(fields: [status_id], references: [id])
}

model Group {
  id             Int      @id @default(autoincrement())
  name           String
  time_stamp     DateTime @default(now())
  phone          String
  email          String   @default("")
  picked_up      Boolean  @default(false)
  reminder_count Int      @default(0)
  date_reminded  DateTime @default(now())
  group_complete Boolean  @default(false)
}

model User {
  id              Int       @id @default(autoincrement())
  username        String?   @unique
  password        String?   @db.VarChar(100)
  first_name      String    @db.VarChar(50)
  last_name       String    @db.VarChar(50)
  email           String    @unique
  phone           String    @unique
  birthday        DateTime  @db.Date
  num_visits      Int       @default(0)
  city            String?   @db.VarChar(50)
  state           String?   @db.VarChar(2)
  zipcode         String?   @db.VarChar(10)
  role_id         Int       @default(5)
  gender          String    @db.VarChar(50)
  student_job     String?   @db.VarChar(50)
  cust_aq_id      Int?
  account_open    DateTime  @default(now()) @db.Date
  recent_visit    DateTime? @db.Date
  street_address1 String?   @db.VarChar(75)
  street_address2 String?   @db.VarChar(75)
  sessions        Session[]
  cust_aq         CustAq?   @relation(fields: [cust_aq_id], references: [id])
  role            UserRole  @relation(fields: [role_id], references: [id])
}

model Availability {
  id         String     @id
  day        String     @db.VarChar(10)
  time       DateTime   @db.Time(6)
  product_id Int
  num_spots  Int        @default(10)
  products   Product    @relation(fields: [product_id], references: [id])
  schedules  Schedule[]
}

model Schedule {
  id                   Int          @id @default(autoincrement())
  class_date           DateTime     @db.Timestamptz(3)
  availability_id      String
  num_wheels_available Int          @default(10)
  orders               Order[]
  availability         Availability @relation(fields: [availability_id], references: [id])
}
